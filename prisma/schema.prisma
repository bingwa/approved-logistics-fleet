generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Truck {
  id                  String               @id @default(cuid())
  registration        String               @unique
  make                String
  model               String
  year                Int
  currentMileage      Int
  status              TruckStatus          @default(ACTIVE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  complianceDocuments ComplianceDocument[]
  fuelRecords         FuelRecord[]
  maintenanceRecords  MaintenanceRecord[]
  notifications       Notification[]
  spareParts          SparePart[]

  @@map("trucks")
}

model FuelRecord {
  id               String   @id @default(cuid())
  truckId          String
  date             DateTime
  liters           Float
  costPerLiter     Float
  totalCost        Float
  route            String?
  odometerReading  Int
  previousOdometer Int
  distanceCovered  Int
  efficiencyKmpl   Float
  attendantName    String
  receiptNumber    String?
  receiptUrl       String?
  createdBy        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [createdBy], references: [id])
  truck            Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("fuel_records")
}

model MaintenanceRecord {
  id                  String            @id @default(cuid())
  truckId             String
  serviceDate         DateTime
  serviceType         ServiceType
  maintenanceCategory ServiceCategory
  description         String
  laborCost           Float
  vendorName          String
  vendorLocation      String?
  technicianName      String?
  mileageAtService    Int?
  nextServiceDue      DateTime?
  routeTaken          String?
  receiptUrl          String?
  status              MaintenanceStatus @default(SCHEDULED)
  createdBy           String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [createdBy], references: [id])
  truck               Truck             @relation(fields: [truckId], references: [id], onDelete: Cascade)
  spareParts          SparePart[]

  @@map("maintenance_records")
}

model SparePart {
  id                  String            @id @default(cuid())
  maintenanceRecordId String
  truckId             String
  name                String
  quantity            Int
  unitPrice           Float
  totalPrice          Float
  receiptUrl          String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  maintenanceRecord   MaintenanceRecord @relation(fields: [maintenanceRecordId], references: [id], onDelete: Cascade)
  truck               Truck             @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("spare_parts")
}

model ComplianceDocument {
  id                String           @id @default(cuid())
  truckId           String
  documentType      DocumentType
  certificateNumber String
  issueDate         DateTime
  expiryDate        DateTime
  cost              Float
  issuingAuthority  String
  documentUrl       String?
  daysToExpiry      Int
  status            ComplianceStatus
  createdBy         String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [createdBy], references: [id])
  truck             Truck            @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("compliance_documents")
}

model ReportGeneration {
  id          String       @id @default(cuid())
  reportType  ReportType
  truckId     String?
  parameters  Json
  fileUrl     String?
  fileSize    String?
  status      ReportStatus @default(GENERATING)
  generatedBy String
  generatedAt DateTime     @default(now())
  user        User         @relation(fields: [generatedBy], references: [id])

  @@map("report_generations")
}

model Notification {
  id                String               @id @default(cuid())
  userId            String
  type              NotificationType
  priority          NotificationPriority
  title             String
  message           String
  truckId           String?
  truckRegistration String?
  actionUrl         String?
  isRead            Boolean              @default(false)
  createdAt         DateTime             @default(now())
  expiresAt         DateTime?
  truck             Truck?               @relation(fields: [truckId], references: [id])
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, isRead])
  @@map("notifications")
}

model NotificationPreference {
  id          String  @id @default(cuid())
  userId      String  @unique
  email       Boolean @default(true)
  sms         Boolean @default(false)
  push        Boolean @default(true)
  compliance  Boolean @default(true)
  maintenance Boolean @default(true)
  fuel        Boolean @default(false)
  system      Boolean @default(true)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  name                    String?
  phone                   String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  department              String?
  emailVerified           DateTime?
  image                   String?
  isActive                Boolean                 @default(true)
  password                String?
  bio                     String?
  lastLoginAt             DateTime?
  location                String?
  role                    Role                    @default(USER)
  accounts                Account[]
  auditLogs               AuditLog[]
  complianceDocuments     ComplianceDocument[]
  fuelRecords             FuelRecord[]
  maintenanceRecords      MaintenanceRecord[]
  notificationPreferences NotificationPreference?
  notifications           Notification[]
  reportGenerations       ReportGeneration[]
  sessions                Session[]
  userPermissions         UserPermission[]

  @@map("users")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([resource, resourceId])
  @@map("audit_logs")
}

model UserPermission {
  id         String     @id @default(cuid())
  userId     String
  permission Permission
  createdAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
  @@map("user_permissions")
}

enum Role {
  USER
  DRIVER
  MANAGER
  ADMIN
  VIEWER
}

enum Permission {
  FUEL_VIEW
  FUEL_CREATE
  FUEL_UPDATE
  FUEL_DELETE
  MAINTENANCE_VIEW
  MAINTENANCE_CREATE
  MAINTENANCE_UPDATE
  MAINTENANCE_DELETE
  COMPLIANCE_VIEW
  COMPLIANCE_CREATE
  COMPLIANCE_UPDATE
  COMPLIANCE_DELETE
  TRUCK_VIEW
  TRUCK_CREATE
  TRUCK_UPDATE
  TRUCK_DELETE
  USER_VIEW
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  REPORT_VIEW
  REPORT_GENERATE
  REPORT_DELETE
  SYSTEM_ADMIN
  AUDIT_VIEW
}

enum TruckStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
  DECOMMISSIONED
}

enum ServiceType {
  MAINTENANCE
  SERVICE
}

enum ServiceCategory {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DocumentType {
  NTSA_INSPECTION
  INSURANCE
  TGL_LICENSE
  COMMERCIAL_LICENSE
}

enum ComplianceStatus {
  VALID
  EXPIRING
  EXPIRED
}

enum ReportType {
  SPARES_REPORT
  FLEET_OVERVIEW
  OPERATIONAL_COSTS
  FUEL_EFFICIENCY
  MAINTENANCE_SUMMARY
  COMPLIANCE_STATUS
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

enum NotificationType {
  COMPLIANCE
  MAINTENANCE
  FUEL
  SYSTEM
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
