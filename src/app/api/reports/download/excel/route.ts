import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { formatKSH } from '@/lib/utils'

// Add this for production
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { report, selectedColumns } = await request.json()

    if (!report) {
      return NextResponse.json({ error: 'No report data provided' }, { status: 400 })
    }

    // Generate CSV with selected columns only
    const csvContent = generateCSVWithSelectedColumns(report, selectedColumns)
    const filename = `Fleet-Report-${new Date().toISOString().split('T')[0]}.csv`

    return new NextResponse(csvContent, {
      status: 200,
      headers: {
        'Content-Type': 'text/csv; charset=utf-8',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': Buffer.byteLength(csvContent, 'utf8').toString(),
        'Cache-Control': 'no-cache, no-store, must-revalidate'
      }
    })

  } catch (error) {
    console.error('CSV generation error:', error)
    return NextResponse.json({ 
      success: false,
      error: 'Failed to generate CSV file',
      message: error.message 
    }, { status: 500 })
  }
}

// Keep your existing generateCSVWithSelectedColumns function
function generateCSVWithSelectedColumns(report: any, selectedColumns: any): string {
  let csv = '\uFEFF' // UTF-8 BOM for proper Excel display
  
  csv += 'Fleet Management Report\n'
  csv += `Generated,${new Date(report.metadata.generatedAt).toLocaleDateString()}\n`
  csv += `Generated by,${report.metadata.generatedBy}\n`
  csv += `Report Type,${report.metadata.reportType}\n`
  csv += `Trucks Included,${report.metadata.trucksIncluded}\n\n`

  // Financial Overview
  csv += 'FINANCIAL OVERVIEW\n'
  csv += 'Metric,Amount\n'
  csv += `Total Operational Cost,${formatKSH(report.analytics?.overall?.totalOperationalCost || 0)}\n`
  
  if (report.analytics?.fuel) {
    csv += `Fuel Expenses,${formatKSH(report.analytics.fuel.totalCost)}\n`
  }
  
  if (report.analytics?.maintenance) {
    csv += `Maintenance Costs,${formatKSH(report.analytics.maintenance.totalMaintenanceCost)}\n`
  }
  
  if (report.analytics?.compliance) {
    csv += `Compliance Costs,${formatKSH(report.analytics.compliance.totalCost)}\n`
  }
  
  csv += '\n'

  // Generate sections for selected columns only
  Object.keys(selectedColumns || {}).forEach(fieldType => {
    const columns = selectedColumns[fieldType] || []
    const data = report.data[fieldType] || []
    
    if (columns.length > 0 && data.length > 0) {
      csv += `${fieldType.toUpperCase()} RECORDS\n`
      // Header with selected columns
      csv += columns.map((col: string) => `"${col}"`).join(',') + '\n'
      
      // Data rows with selected columns
      data.forEach((record: any) => {
        const row = columns.map((col: string) => {
          let value = record[col] || ''
          
          // Format dates
          if (col.toLowerCase().includes('date') && value) {
            try {
              value = new Date(value).toLocaleDateString()
            } catch (e) {}
          }
          
          // Format costs
          if (col.toLowerCase().includes('cost') && typeof value === 'number') {
            value = formatKSH(value)
          }
          
          // Wrap in quotes if contains comma
          if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
            value = `"${value.replace(/"/g, '""')}"`
          }
          
          return value
        })
        csv += row.join(',') + '\n'
      })
      csv += '\n'
    }
  })

  return csv
}
